{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { dataFetcher } from '../util/dataFetcher';\nimport { API_DOMAIN, TOP_STORIES, STORY_URL } from '../util/config/env.json';\nvar topStoriesApi = \"\".concat(API_DOMAIN).concat(TOP_STORIES);\nvar singleStoryApi = \"\".concat(API_DOMAIN).concat(STORY_URL);\n/**\n * @method getToStoriesID\n * @summary fetching array data for all the top stories\n * @return {Promise} array of stories\n */\n\nexport var getToStoriesID = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", dataFetcher(topStoriesApi).then(function (_ref2) {\n              var data = _ref2.data;\n              return data;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getToStoriesID() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * @method getSingleStory\n * @summary fetching data for a particular story by its ID's\n * @param {Number} storyId - ID of each story.\n * @return {Promise} single object containing story data\n */\n\nexport var getSingleStory = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(storyId) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", dataFetcher(\"\".concat(singleStoryApi + storyId, \".json\")).then(function (_ref4) {\n              var data = _ref4.data;\n              return data;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getSingleStory(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/gunsood/Documents/Projects/Hacker_News_Article_App/hacker-news-app/services/hackerNewsApi.js"],"names":["dataFetcher","API_DOMAIN","TOP_STORIES","STORY_URL","topStoriesApi","singleStoryApi","getToStoriesID","then","data","getSingleStory","storyId"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,qBAA5B;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,SAAlC,QAAmD,yBAAnD;AAGA,IAAMC,aAAa,aAAMH,UAAN,SAAmBC,WAAnB,CAAnB;AACA,IAAMG,cAAc,aAAMJ,UAAN,SAAmBE,SAAnB,CAApB;AAEA;;;;;;AAKA,OAAO,IAAMG,cAAc;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAYN,WAAW,CAACI,aAAD,CAAX,CAA2BG,IAA3B,CAAgC;AAAA,kBAAEC,IAAF,SAAEA,IAAF;AAAA,qBAAYA,IAAZ;AAAA,aAAhC,CAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdF,cAAc;AAAA;AAAA;AAAA,GAApB;AAGP;;;;;;;AAMA,OAAO,IAAMG,cAAc;AAAA,uEAAG,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAmBV,WAAW,WAAIK,cAAc,GAAGK,OAArB,WAAX,CAAgDH,IAAhD,CAAqD;AAAA,kBAAEC,IAAF,SAAEA,IAAF;AAAA,qBAAYA,IAAZ;AAAA,aAArD,CAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdC,cAAc;AAAA;AAAA;AAAA,GAApB","sourcesContent":["import { dataFetcher } from '../util/dataFetcher';\nimport { API_DOMAIN, TOP_STORIES, STORY_URL } from '../util/config/env.json';\n\n\nconst topStoriesApi = `${API_DOMAIN}${TOP_STORIES}`;\nconst singleStoryApi = `${API_DOMAIN}${STORY_URL}`;\n\n/**\n * @method getToStoriesID\n * @summary fetching array data for all the top stories\n * @return {Promise} array of stories\n */\nexport const getToStoriesID = async () => dataFetcher(topStoriesApi).then(({data}) => data);\n\n\n/**\n * @method getSingleStory\n * @summary fetching data for a particular story by its ID's\n * @param {Number} storyId - ID of each story.\n * @return {Promise} single object containing story data\n */\nexport const getSingleStory = async (storyId) => dataFetcher(`${singleStoryApi + storyId}.json`).then(({data}) => data);"]},"metadata":{},"sourceType":"module"}
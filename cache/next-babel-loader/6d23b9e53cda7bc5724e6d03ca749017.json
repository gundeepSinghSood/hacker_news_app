{"ast":null,"code":"import { dataFetcher } from '../util/dataFetcher';\nimport { API_DOMAIN, TOP_STORIES, STORY_URL } from '../util/config/env.json';\nconst topStoriesApi = `${API_DOMAIN}${TOP_STORIES}`;\nconst singleStoryApi = `${API_DOMAIN}${STORY_URL}`;\n/**\n * @method getToStoriesID\n * @summary fetching array data for all the top stories\n * @return {Promise} array of stories\n */\n\nexport const getToStoriesID = async () => dataFetcher(topStoriesApi).then(({\n  data\n}) => data);\n/**\n * @method getSingleStory\n * @summary fetching data for a particular story by its ID's\n * @param {Number} storyId - ID of each story.\n * @return {Promise} single object containing story data\n */\n\nexport const getSingleStory = async storyId => dataFetcher(`${singleStoryApi + storyId}.json`).then(({\n  data\n}) => data);","map":{"version":3,"sources":["/Users/gunsood/Documents/Projects/Hacker_News_Article_App/hacker-news-app/services/hackerNewsApi.js"],"names":["dataFetcher","API_DOMAIN","TOP_STORIES","STORY_URL","topStoriesApi","singleStoryApi","getToStoriesID","then","data","getSingleStory","storyId"],"mappings":"AAAA,SAASA,WAAT,QAA4B,qBAA5B;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,SAAlC,QAAmD,yBAAnD;AAGA,MAAMC,aAAa,GAAI,GAAEH,UAAW,GAAEC,WAAY,EAAlD;AACA,MAAMG,cAAc,GAAI,GAAEJ,UAAW,GAAEE,SAAU,EAAjD;AAEA;;;;;;AAKA,OAAO,MAAMG,cAAc,GAAG,YAAYN,WAAW,CAACI,aAAD,CAAX,CAA2BG,IAA3B,CAAgC,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAYA,IAA5C,CAAnC;AAGP;;;;;;;AAMA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmBV,WAAW,CAAE,GAAEK,cAAc,GAAGK,OAAQ,OAA7B,CAAX,CAAgDH,IAAhD,CAAqD,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAYA,IAAjE,CAA1C","sourcesContent":["import { dataFetcher } from '../util/dataFetcher';\nimport { API_DOMAIN, TOP_STORIES, STORY_URL } from '../util/config/env.json';\n\n\nconst topStoriesApi = `${API_DOMAIN}${TOP_STORIES}`;\nconst singleStoryApi = `${API_DOMAIN}${STORY_URL}`;\n\n/**\n * @method getToStoriesID\n * @summary fetching array data for all the top stories\n * @return {Promise} array of stories\n */\nexport const getToStoriesID = async () => dataFetcher(topStoriesApi).then(({data}) => data);\n\n\n/**\n * @method getSingleStory\n * @summary fetching data for a particular story by its ID's\n * @param {Number} storyId - ID of each story.\n * @return {Promise} single object containing story data\n */\nexport const getSingleStory = async (storyId) => dataFetcher(`${singleStoryApi + storyId}.json`).then(({data}) => data);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState('light');\n  const {\n    0: mountedComponent,\n    1: setMountedComponent\n  } = useState(false);\n\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => theme === 'light' ? setMode('dark') : setMode('light');\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme && setTheme(localTheme);\n    setMountedComponent(true);\n  }, []);\n  return [theme, themeToggler, mountedComponent];\n};","map":{"version":3,"sources":["/Users/gunsood/Documents/Projects/Hacker_News_Article_App/hacker-news-app/components/util/useDarkMode.js"],"names":["useEffect","useState","useDarkMode","theme","setTheme","mountedComponent","setMountedComponent","setMode","mode","window","localStorage","setItem","themeToggler","localTheme","getItem"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBH,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM;AAAA,OAACI,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CL,QAAQ,CAAC,KAAD,CAAxD;;AAEA,QAAMM,OAAO,GAAGC,IAAI,IAAI;AACpBC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCH,IAArC;AACAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR;AACH,GAHD;;AAKA,QAAMI,YAAY,GAAG,MAAMT,KAAK,KAAK,OAAV,GAAoBI,OAAO,CAAC,MAAD,CAA3B,GAAsCA,OAAO,CAAC,OAAD,CAAxE;;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,UAAU,GAAGJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,CAAnB;AACAD,IAAAA,UAAU,IAAIT,QAAQ,CAACS,UAAD,CAAtB;AACAP,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAO,CAACH,KAAD,EAAQS,YAAR,EAAsBP,gBAAtB,CAAP;AACH,CAjBM","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useDarkMode = () => {\n    const [theme, setTheme] = useState('light');\n    const [mountedComponent, setMountedComponent] = useState(false)\n\n    const setMode = mode => {\n        window.localStorage.setItem('theme', mode)\n        setTheme(mode)\n    };\n\n    const themeToggler = () => theme === 'light' ? setMode('dark') : setMode('light')\n\n    useEffect(() => {\n        const localTheme = window.localStorage.getItem('theme');\n        localTheme && setTheme(localTheme);\n        setMountedComponent(true);\n    }, []);\n    return [theme, themeToggler, mountedComponent]\n};\n"]},"metadata":{},"sourceType":"module"}
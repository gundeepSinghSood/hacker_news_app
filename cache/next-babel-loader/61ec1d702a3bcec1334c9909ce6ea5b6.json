{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\n/**\n * Implements a data fetcher using Axios\n * @param {string} url The URL to request; may include query string\n * @param {any} data Optional data to POST with the request.\n */\n\nexport function dataFetcher(url, data) {\n  var headers = {};\n  return axios(_objectSpread({\n    url: url,\n    method: data ? 'POST' : 'GET'\n  }, data && {\n    data: data\n  }));\n}","map":{"version":3,"sources":["/Users/gunsood/Documents/Projects/Hacker_News_Article_App/hacker-news-app/components/util/dataFetcher.js"],"names":["axios","dataFetcher","url","data","headers","method"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;AAKA,OAAO,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAErC,MAAMC,OAAO,GAAG,EAAhB;AAIA,SAAOJ,KAAK;AACVE,IAAAA,GAAG,EAAHA,GADU;AAEVG,IAAAA,MAAM,EAAEF,IAAI,GAAG,MAAH,GAAY;AAFd,KAGNA,IAAI,IAAI;AAAEA,IAAAA,IAAI,EAAJA;AAAF,GAHF,EAAZ;AAKD","sourcesContent":["import axios from 'axios';\n\n/**\n * Implements a data fetcher using Axios\n * @param {string} url The URL to request; may include query string\n * @param {any} data Optional data to POST with the request.\n */\nexport function dataFetcher(url, data) {\n\n  const headers = {\n    \n  }\n\n  return axios({\n    url,\n    method: data ? 'POST' : 'GET',\n    ...(data && { data })\n  });\n}\n"]},"metadata":{},"sourceType":"module"}